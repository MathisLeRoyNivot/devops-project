# Compose file version
version: '2'
services:
  connector:
    build: ./connector
    depends_on:
      - "database"
    restart: on-failure
    ports:
      - "3000:3000"

  automate1:
    # Build dockerfile in folder plc-python
    build: 
      context: ./production-unite
      # Python script arguments
      args:
        var1: 1
        var2: 10
        var3: 3000
    depends_on:
      - "database"
    command: tail -f /dev/null
    ports:
      - "3001:3001"

  automate2:
    # Build dockerfile in folder plc-python
    build: 
      context: ./production-unite
      # Python script arguments
      args:
        var1: 2
        var2: 10
        var3: 3000
    depends_on:
      - "database"
    command: tail -f /dev/null
    ports:
      - "3002:3002"

  automate3:
    # Build dockerfile in folder plc-python
    build: 
      context: ./production-unite
      # Python script arguments
      args:
        var1: 3
        var2: 10
        var3: 3000
    depends_on:
      - "database"
    command: tail -f /dev/null
    ports:
      - "3003:3003"

  automate4:
    # Build dockerfile in folder plc-python
    build: 
      context: ./production-unite
      # Python script arguments
      args:
        var1: 4
        var2: 10
        var3: 3000
    depends_on:
      - "database"
    command: tail -f /dev/null
    ports:
      - "3004:3004"
      
  automate5:
    # Build dockerfile in folder plc-python
    build: 
      context: ./production-unite
      # Python script arguments
      args:
        var1: 5
        var2: 10
        var3: 3000
    depends_on:
      - "database"
    command: tail -f /dev/null
    ports:
      - "3005:3005"

  database:
    build: ./bdd
    environment:
      - "MYSQL_ALLOW_EMPTY_PASSWORD=false"
      - "MYSQL_ROOT_PASSWORD=test"
    ports:
      - "3306:3306"

  bdd-api:
    depends_on:
      - "database"
    hostname: localhost
    build: ./bdd-api
    ports:
      - "3333:3333"

  website:
    depends_on:
      - "database"
    build: ./website
    ports:
        - "80:80"
